target C {
  files: "common.h",
  build-type: Debug
};

preamble {=
  #include "common.h"
  #include "platform.h" // PRINTF_TAG
  #include <string.h> // memcpy
=}

reactor Head {
  input move: move_t // Move command from the transition system
  output symbol: bool // The symbol read at the current square
  input write: bool // The symbol to write back to the current square
  input dump: bool // Command to dump the contents off the tape to stdout
  state current_ustep:unsigned = 0 // The current position of the tape, encoded as a microindex
  state border:unsigned = 0 // The current maximum microstep index (essentially the current length of the tape)
  state tape_left_border:unsigned = 0 // The left-most microstep index (is always even)
  state tape_right_border:unsigned = 0 // The right-mist microstep index (always odd)

  logical action tape: bool // With defer-policy

  // Default mode
  initial mode Running {
    reaction(tape) -> tape, symbol {=
      // lf_print("Tape");
      tag_t event = lf_tag();
      // Check if this event has microstep == current_ustep
      // If not, reschedule it for next time
      if (event.microstep == self->current_ustep) {
        lf_set(symbol, tape->value);
      } else {
        lf_schedule_copy(tape, 1, &tape->value, sizeof(bool));
      }
    =}

    reaction(write) -> tape {=
      // Schedule an event for this exact microstep at next timestamp.
      // Either _lf_schedule_at_tag
      lf_schedule_copy(tape, 1, &write->value, sizeof(bool));
    =}

    reaction(move) -> tape {=
      // We encode an infinite tape onto a 1-sided infinte tape as follows:
      // (ustep, tape_pos)
      // (0, 0)
      // (1, 1)
      // (2, -1)
      // (3, 2)
      // (4, -2)
      // ... etc. So if ustep is even, then its a negative tape position

      bool zero = false;

      if (self->current_ustep == 0) {
        if (move->value == RIGHT) {
          if (self->border < 1) {
            lf_schedule_copy(tape, 1, &zero, sizeof(bool));
            self->border++;
          }
          if (self->tape_right_border < 1) {
            self->tape_right_border = 1;
          } 
          self->current_ustep = 1;
        } else {
          while(self->border < 2) {
            lf_schedule_copy(tape, 1, &zero, sizeof(bool));
            self->border++;
          }
          if (self->tape_left_border < 2) {
            self->tape_left_border=2;
          }

          self->current_ustep = 2;
        }
      } else if (self->current_ustep == 1) {
        if (move->value == RIGHT) {
          while(self->border < 3) {
            lf_schedule_copy(tape, 1, &zero, sizeof(bool));
            self->border++;
          }
          if (self->tape_right_border < 3) {
            self->tape_right_border = 3;
          }

          self->current_ustep = 3;
        } else {
          self->current_ustep = 0;
        }
      } else if (self->current_ustep % 2 == 0) {
        // Negative
        if (move->value == RIGHT) {
          self->current_ustep -= 2;
        } else {
          while(self->border < self->current_ustep+2) {
            lf_schedule_copy(tape, 1, &zero, sizeof(bool));
            self->border++;
          }
          self->current_ustep += 2;

          if (self->tape_left_border < self->current_ustep) {
            self->tape_left_border = self->current_ustep;
          }
        }

      } else {
        // Positive values
        if (move->value == RIGHT) {
          while(self->border < self->current_ustep+2) {
            lf_schedule_copy(tape, 1, &zero, sizeof(bool));
            self->border++;
          }
          self->current_ustep += 2;

          if (self->tape_right_border < self->current_ustep) {
            self->tape_right_border = self->current_ustep;
          }

        } else {
          self->current_ustep -= 2;
        }
      }
    =}
    
    reaction(dump) -> PrintOut {=
      lf_print("Turing Machine halted. Printing out tape [%d, %d]:", 
        -1*(int) self->tape_left_border/2, self->tape_right_border/2);
      lf_set_mode(PrintOut);
      self->next_print_ustep = self->tape_left_border;
    =}
    
    reaction(startup) -> tape {=
      bool zero=0;
      lf_schedule_copy(tape, 1, &zero, sizeof(bool));
    =}
  }

  state print:bool = false
  state next_print_ustep:int = 0

  // The mode for printing out the contents of the tape
  mode PrintOut {
    reaction(tape) -> tape {=
      tag_t tag = lf_tag();

      // Calculate its position
      int curr_pos = ustep_to_position(tag.microstep);
      int next_pos = ustep_to_position(self->next_print_ustep);

      if (tag.microstep == self->next_print_ustep) {
        // Print the symbol
        lf_print("%i: %d", curr_pos, tape->value);      

        // Calculate the next microstep to print
        self->next_print_ustep = position_to_ustep(curr_pos + 1);
      } else {
        // See if we should reschedule this symbol because we are in
        // the negatives. If are current tape position is greater than
        // one we are looking for. Then we are searching around the wrap and
        // must reschedule this symbol
        if (curr_pos > next_pos) {
          lf_schedule_copy(tape, 1, &tape->value, sizeof(bool));
        }
      }
    =}
  }
}

reactor Transition {
  input symbol: bool
  output move: move_t
  output write: bool
  output dump: bool
  state pc: int = 0
  state m_configs:m_config_t*

  reaction(startup) {=
    // Simple program printing 101010 to the tape
    self->m_configs = (m_config_t *) malloc(7 * sizeof(m_config_t));
    m_config_t c[] = {
      CONFIG1(ACTION(RIGHT,1,1)),
      CONFIG1(ACTION(RIGHT,0,2)),
      CONFIG1(ACTION(RIGHT,1,3)),
      CONFIG1(ACTION(RIGHT,0,4)),
      CONFIG1(ACTION(RIGHT,1,5)),
      CONFIG1(ACTION(RIGHT,0,6)),
      CONFIG1(ACTION(HALT,0,0)),
    };
    memcpy(self->m_configs, c, sizeof(c));
  =}

  reaction(symbol) -> write, move, dump {=
    m_config_t inst = self->m_configs[self->pc];
    action_t action = symbol ? inst.one : inst.zero;

    if(action.move == HALT) {
      lf_set(dump, true);
    } else {
      lf_set(move, action.move);
      lf_set(write, action.symbol);
      self->pc = action.next;
    }
  =}
}


main reactor {
  head = new Head()
  
  transition =  new Transition()

  head.symbol -> transition.symbol
  transition.move -> head.move
  transition.write -> head.write
  transition.dump -> head.dump

}